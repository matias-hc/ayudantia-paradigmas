:OPTIONS:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [titlepage,11pt]
#+LATEX_HEADER: \input{assets/lib.tex}
#+LATEX_HEADER: \renewcommand{\maketitle}{\input{assets/title.tex}}
#+LATEX_HEADER: \input{assets/config.tex}
#+LANGUAGE: spanish
#+OPTIONS: toc:2
:END:
#+TITLE: Ejercicios ayudantia 2021
:META:
#+AUTHOR: Matias Hurtado Carrasco
#+KEYWORDS: Programacion, Paradigma de programacion, Programming, Programming paradigm, Python, Programacion funcional, Functional programming, Scheme, Java, POO, Programacion orientada a objetos, OOP, Object oriented programming
:END:

\newpage
* <2021-04-29 Thu>
# [[file:2021-04-29/fecha1/ejercicio.py][Ejercicio]]
** Ejemplos
1) tupla
    #+begin_src python :results output
tup = (1 , 2)

for v in tup:
    print(v)
    #+end_src

    #+RESULTS:
    : 1
    : 2

2) lista
    #+begin_src python :results output
lis = [0, 2, 4, 6]
lis.append(11)

for v in lis:
    print(v//2, v%2)
    #+end_src

    #+RESULTS:
    : 0 0
    : 1 0
    : 2 0
    : 3 0
    : 5 1

3) funcion
    #+begin_src python :results output
def funp(value):
    while value > 0:
        yield value
        value -= 1
    else:
        return 0

for v in funp(5):
    print("funp: " + str(v+1))
    #+end_src

    #+RESULTS:
    : funp: 6
    : funp: 5
    : funp: 4
    : funp: 3
    : funp: 2

4) lista de funciones
    #+begin_src python :results output
lisf = [lambda x, y: x**2 + y, lambda x, y: x + y**2]

for f in lisf:
    print("f({},{}) = {}".format(2, 3, f(2,3)))
    #+end_src

    #+RESULTS:
    : f(2,3) = 7
    : f(2,3) = 11

5) string
    #+begin_src python :results output
st = "hola"

for c in st:
    print("letra {}".format(c))
    #+end_src

    #+RESULTS:
    : letra h
    : letra o
    : letra l
    : letra a

6) conjunto
    #+begin_src python :results output
try:
    myset = { "algo", 4 , [1, 2]}
    for e in myset:
        print("{}".format(e))
except TypeError as E:
    print("TypeError:", E)

myset2 = { "algo", 4 , (1, 2)}
for e in myset2:
    print("{} {}".format(e, type(e)))
    #+end_src

    #+RESULTS:
    : TypeError: unhashable type: 'list'
    : algo <class 'str'>
    : (1, 2) <class 'tuple'>
    : 4 <class 'int'>

7) diccionarios
    #+begin_src python :results output
dic = { "llave1" : "valor1"
        , 2 : 32
        , 4 : "cabello"
        , "9" : 48
       }

dic2 = {"2": 456, 48 : 'casi', 22 : 416, 100 : "no", "que", "queue"}

for k in dic:
    print("dic[{}] = {}".format(k, dic[k]))

for i in range(101):
    if i in dic2:
        print((i, type(i)), (dic2[i], type(dic2[i])))
    #+end_src

    #+RESULTS:
    : dic[llave1] = valor1
    : dic[2] = 32
    : dic[4] = cabello
    : dic[9] = 48
    : (22, <class 'int'>) (416, <class 'int'>)
    : (48, <class 'int'>) ('casi', <class 'str'>)
    : (100, <class 'int'>) ('no', <class 'str'>)

* <2021-05-06 Thu>
** Ejercicios
1) Dado un diccionario, generar listas de tuplas 'llave, valor' ordenada por las llaves y por los valores respectivamente.
    #+begin_src python :results output
## para poder comparar strings de tal forma que por ejemplo se cumpla
## "a < B < c < D" (ignorar si es mayuscula) se compara con la key str.lower
## para que las letras mayusculas al momento de comparacion valgan igual que
## las minusculas
dic = {"abc" : 4, "casa" : 16, "ceramica" : 5, "LCC" : 3, "zebra" : 7}

### ordenar por valor de la llave

## usando el comprension de listas que itera sobre las llaves ordenadas
#ld_byKey = [(k, dic[k]) for k in sorted(dic,key=str.lower)]

## pasando a lista las tuplas llave/valor del metodo items() de diccionario,
## y ordenandola posteriormente
ld_byKey = sorted(list(dic.items()), key=lambda tup : str.lower(tup[0]))

### ordenar por valor de los item 'valor' del diccionario

## usando el comprension de listas que itera sobre las llaves ordenadas con
## respecto a los valores correspondientes
#ld_byVal = [(k, dic[k]) for k in sorted(dic,key=lambda k : dic[k])]

ld_byVal = sorted(list(dic.items()), key=lambda tup : tup[1])

print(ld_byKey)
print(ld_byVal)
    #+end_src

    #+RESULTS:
    : [('abc', 4), ('casa', 16), ('ceramica', 5), ('LCC', 3), ('zebra', 7)]
    : [('LCC', 3), ('abc', 4), ('ceramica', 5), ('zebra', 7), ('casa', 16)]

2) Implementar mergesort para listas con distintos tipos de elementos, y que devuelva un diccionario de los tipos y las listas ordenadas correspondientes que se encuentren.
    #+begin_src python :results output
LD = ["Kz3UuwTG", 23, "duGkCWzB", 12,
      "qju7TM5M", "4XnEE9ZJ", 46, "WAk0BSv4",
      32, 14, "76HBLSP8", "IBUs3PZf",
      16, 100, "amMnAkZW", "2jSRNUzD",
      0, 23, "rYBe8CYl", 22]

def mergesort_type(L):
    if (Llen := len(L)) <= 1:
        return dict([(type(x), [x]) for x in L])
    else:
        return merge_type(mergesort_type(L[:(Llen//2)]),
                          mergesort_type(L[(Llen//2):]))

def merge_type(d1, d2):
    D = dict()
    for t in set(list(d1.keys())+list(d2.keys())):
        if t in d1 and t in d2:
            D[t] = merge(d1[t], d2[t])
        elif t in d1:
            D[t] = d1[t]
        elif t in d2:
            D[t] = d2[t]
    return D

def merge(l1, l2):
    L=[]
    while True :
        if (len(l1) == 0):
            L += l2
            break
        if (len(l2) == 0):
            L += l1
            break
        if (l1[0] < l2[0]):
            L.append(l1[0])
            l1 = l1[1:]
        else:
            L.append(l2[0])
            l2 = l2[1:]
    return L

def merge_add(D,l):
    for obj in l:
        if (tp:=type(obj)) in D:
            D[tp].append(obj)
        else:
            D[tp] = [obj]

for LT in mergesort_type(LD).items():
    print(LT)
    #+end_src

    #+RESULTS:
    : (<class 'str'>, ['2jSRNUzD', '4XnEE9ZJ', '76HBLSP8', 'IBUs3PZf', 'Kz3UuwTG', 'WAk0BSv4', 'amMnAkZW', 'duGkCWzB', 'qju7TM5M', 'rYBe8CYl'])
    : (<class 'int'>, [0, 12, 14, 16, 22, 23, 23, 32, 46, 100])

** Ejemplos
1) Implementacion mediante lambda del factorial. No es muy practica mas alla de ser una implementacion particularmente funcional, pero en python es una solucion bastante forzada y lejos de lo que se esperaria como una solucion.
    #+begin_src python :results output
print(
    (lambda x :
     exec('raise TypeError("Only non-negative integers allowed")')
     if type(x) not in (int,float) or x<0 or x%1
     else (
             (fact := (lambda x :
                       1 if x<=1
                       else x * fact(x-1)))(x)))(7)
    )
    #+end_src

    #+RESULTS:
    : 5040
